/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
		jcenter()
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE")
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
//		classpath 'io.spring.gradle:spring-build-conventions:0.0.23.RELEASE'
	}
}

// apply plugin: 'io.spring.convention.root'

def coreProjects = subprojects.findAll { !it.name.contains("sample") }

configure(allprojects) { project ->
	group = "de.governikus.spring.security.extensions"

	ext.slf4jVersion = "1.7.36"
	ext.springVersion = "5.3.32"
	ext.springSecurityVersion = "5.7.3"
	ext.bcprovVersion = "1.72"
	ext.bcpkixVersion = "1.72"
	ext.openSamlVersion = "4.2.0"
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
	ext.junitVersion = "5.9.1"
    ext.jaxbApiVersion = "2.3.3"
    ext.mockitoVersion = "4.4.0"
    ext.byteBuddyVersion = "1.12.8"

	apply plugin: "propdeps"
	apply plugin: "java"
	apply from: "${gradleScriptDir}/ide.gradle"
	apply plugin: 'org.junit.platform.gradle.plugin'

	compileJava {
		sourceCompatibility=11
		targetCompatibility=11
	}
	compileTestJava {
		sourceCompatibility=11
		targetCompatibility=11
	}

	test {
		useJUnitPlatform()
		systemProperty("java.awt.headless", "true")
		maxParallelForks = project.maxParallelForks as int
	}

	repositories {
		mavenCentral()
		maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
	}

	dependencies {
		testCompile(group: "org.junit.jupiter", name: "junit-jupiter-api", version: "$junitVersion")
		testCompile(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "$junitVersion")
		testCompile(group: "org.junit.jupiter", name: "junit-jupiter-params", version: "$junitVersion")
        testCompile(group: "org.junit.platform", name: "junit-platform-launcher", version: "1.8.2")	
	}


	ext.javadocLinks = [
	] as String[]
}

configure(subprojects) { subproject ->
	apply from: "${gradleScriptDir}/publish-maven.gradle"
}

configure(coreProjects) { p ->
	apply plugin: 'spring-io'

	ext.springIoVersion = project.hasProperty('platformVersion') ? platformVersion : 'Cairo-SR7'

	configurations {
		springIoTestRuntime {
			resolutionStrategy.eachDependency { DependencyResolveDetails details ->
				if (details.requested.name == 'servlet-api') {
					details.useTarget 'javax.servlet:javax.servlet-api:4.0.0'
				}
			}
		}
	}

	dependencies {
		springIoVersions "io.spring.platform:platform-versions:${springIoVersion}@properties"
	}

	jar {
		manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = p.name
		manifest.attributes["Implementation-Version"] = p.version

		from("${rootProject.projectDir}/docs/dist") {
			include "license.txt"
			into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}

	javadoc {
		failOnError = false
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(project.ext.javadocLinks)

		// suppress warnings due to cross-module @see and @link references;
		// note that global 'api' task does display all warnings.
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = "sources"
		from sourceSets.main.allJava.srcDirs
		include "**/*.java", "**/*.aj"
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

configure(rootProject) {
	description = "Spring Security SAML"

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	task api(type: Javadoc) {
		failOnError = false
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		dependsOn {
			coreProjects.collect {
				it.tasks.getByName("jar")
			}
		}
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.splitIndex = true
		options.links(project.ext.javadocLinks)

		source coreProjects.collect { project ->
			project.sourceSets.main.allJava
		}

		destinationDir = new File(buildDir, "api")

		doFirst {
			classpath += files(coreProjects.collect { it.sourceSets.main.compileClasspath })
		}
	}

	task docsZip(type: Zip) {
		group = "Distribution"
		baseName = "spring-security-saml"
		classifier = "docs"
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at https://docs.spring.io/spring-security-saml/docs."

		from (api) {
			into "api"
		}

	}

	task distZip(type: Zip, dependsOn: [docsZip]) {
		group = "Distribution"
		baseName = "spring-security-saml"
		classifier = "dist"
		description = "Builds -${classifier} archive, containing all jars and docs, " +
					"suitable for community download page."

		ext.baseDir = "${baseName}-${project.version}"

		from("docs/dist") {
			include "readme.txt"
			include "license.txt"
			include "notice.txt"
			into "${baseDir}"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}

		from(zipTree(docsZip.archivePath)) {
			into "${baseDir}/docs"
		}

        from("sample") {
            include "src/**/*"
            include "pom.xml"
            into "${baseDir}/sample"
        }

		coreProjects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath("sourcesJar")) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath("javadocJar")) {
					from subproject.javadocJar
				}
			}
		}
	}

	// Create an distribution that contains all dependencies (required and optional).
	// Not published by default; only for use when building from source.
	task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
		group = "Distribution"
		baseName = "spring-security-saml"
		classifier = "dist-with-deps"
		description = "Builds -${classifier} archive, containing everything " +
			"in the -${distZip.classifier} archive plus all runtime dependencies."

		from zipTree(distZip.archivePath)

		gradle.taskGraph.whenReady { taskGraph ->
			if (taskGraph.hasTask(":${zipTask.name}")) {
				def projectNames = rootProject.subprojects*.name
				def artifacts = new HashSet()
				coreProjects.each { subproject ->
					(subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts +
					subproject.configurations.optional.resolvedConfiguration.resolvedArtifacts).each { artifact ->
						def dependency = artifact.moduleVersion.id
						if (!projectNames.contains(dependency.name)) {
							artifacts << artifact.file
						}
					}
				}

				zipTask.from(artifacts) {
					into "${distZip.baseDir}/deps"
				}
			}
		}
	}

	artifacts {
		archives docsZip
		archives distZip
	}
}
